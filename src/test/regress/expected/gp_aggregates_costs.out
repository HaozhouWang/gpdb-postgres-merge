set optimizer=off;
set statement_mem="1800";
create table cost_agg_t1(a int, b int, c int);
insert into cost_agg_t1 select i, random() * 99999, i % 2000 from generate_series(1, 1000000) i;
create table cost_agg_t2 as select * from cost_agg_t1 with no data;
insert into cost_agg_t2 select i, random() * 99999, i % 300000 from generate_series(1, 1000000) i;
explain select avg(b) from cost_agg_t1 group by c;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=16552.97..16577.97 rows=2000 width=36)
   ->  Finalize HashAggregate  (cost=16552.97..16577.97 rows=667 width=36)
         Group Key: c
         ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=16345.00..16525.00 rows=2000 width=36)
               Hash Key: c
               ->  Partial HashAggregate  (cost=16345.00..16405.00 rows=2000 width=36)
                     Group Key: c
                     ->  Seq Scan on cost_agg_t1  (cost=0.00..11345.00 rows=333334 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

explain select avg(b) from cost_agg_t2 group by c;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=16555.00..16620.00 rows=2000 width=36)
   ->  Finalize HashAggregate  (cost=16555.00..16580.00 rows=667 width=36)
         Group Key: c
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=16345.00..16525.00 rows=2000 width=36)
               Hash Key: c
               ->  Partial HashAggregate  (cost=16345.00..16405.00 rows=2000 width=36)
                     Group Key: c
                     ->  Seq Scan on cost_agg_t2  (cost=0.00..11345.00 rows=333334 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

insert into cost_agg_t2 select i, random() * 99999,1 from generate_series(1, 200000) i;
analyze cost_agg_t2;
explain select avg(b) from cost_agg_t2 group by c;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=51370.91..66571.68 rows=467716 width=36)
   ->  Finalize HashAggregate  (cost=51370.91..57217.36 rows=155906 width=36)
         Group Key: c
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=19614.00..46834.21 rows=302447 width=36)
               Hash Key: c
               ->  Partial HashAggregate  (cost=19614.00..28687.40 rows=302447 width=36)
                     Group Key: c
                     ->  Seq Scan on cost_agg_t2  (cost=0.00..13614.00 rows=400000 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

drop table cost_agg_t1;
drop table cost_agg_t2;
reset statement_mem;
reset optimizer;
